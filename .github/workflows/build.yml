name: Build PdfImageAddIn

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1
    
    - name: Setup Visual Studio
      uses: microsoft/setup-msbuild@v1.1
      with:
        vs-version: '16.0'
    
    - name: Download PDFium
      run: |
        # Скачиваем предсобранные PDFium библиотеки с retry логикой
        $url = "https://github.com/bblanchon/pdfium-binaries/releases/download/chromium%2F5790/pdfium-win-x86.tgz"
        $output = "pdfium-win-x86.tgz"
        $maxAttempts = 3
        $attempt = 1
        
        while ($attempt -le $maxAttempts) {
            try {
                Write-Host "Attempt $attempt of $maxAttempts to download PDFium..."
                
                # Try curl (more reliable for large files)
                if (Get-Command curl -ErrorAction SilentlyContinue) {
                    Write-Host "Using curl for download..."
                    & curl.exe --location --output $output $url --retry 3 --retry-delay 5 --max-time 300
                    if ($LASTEXITCODE -eq 0) {
                        Write-Host "Curl download successful"
                        break
                    }
                }
                
                # Fallback to Invoke-WebRequest
                Write-Host "Using Invoke-WebRequest..."
                $webClient = New-Object System.Net.WebClient
                $webClient.DownloadFile($url, $output)
                Write-Host "WebClient download successful"
                break
                
            } catch {
                Write-Host "Attempt $attempt failed: $($_.Exception.Message)"
                if ($attempt -eq $maxAttempts) {
                    Write-Host "Trying alternative source..."
                    # Use alternative URL from GitHub releases
                    $altUrl = "https://github.com/bblanchon/pdfium-binaries/releases/latest/download/pdfium-win-x86.tgz"
                    try {
                        & curl.exe --location --output $output $altUrl --retry 3 --retry-delay 5 --max-time 300
                        if ($LASTEXITCODE -eq 0) {
                            Write-Host "Alternative source download successful"
                            break
                        }
                    } catch {
                        Write-Host "All download attempts failed"
                        throw "Failed to download PDFium libraries"
                    }
                }
                $attempt++
                Start-Sleep -Seconds 10
            }
        }
        
        # Check that file was downloaded
        if (!(Test-Path $output)) {
            throw "PDFium file was not downloaded"
        }
        
        Write-Host "Extracting PDFium..."
        tar -xzf $output
        
        # Create directories for libraries
        New-Item -ItemType Directory -Path "lib" -Force
        New-Item -ItemType Directory -Path "include" -Force
        
        # Copy files
        Write-Host "Copying files..."
        if (Test-Path "bin") {
            Copy-Item -Path "bin\*.dll" -Destination "lib\" -Force
        }
        if (Test-Path "lib") {
            Copy-Item -Path "lib\*.lib" -Destination "lib\" -Force
        }
        if (Test-Path "include") {
            Copy-Item -Path "include\*" -Destination "include\" -Recurse -Force
        }
        
        # Show structure
        Write-Host "PDFium installation result:"
        if (Test-Path "lib") { Get-ChildItem -Path "lib" -Recurse }
        if (Test-Path "include") { Get-ChildItem -Path "include" -Recurse }
      shell: powershell
    
    - name: Build AddIn Base Library
      run: |
        cd Source/Addin
        # Compile base library
        cl /c /EHsc /I../../include *.cpp
        lib /OUT:../../lib/addin.lib *.obj
      shell: cmd
    
    - name: Build PdfImageAddIn
      run: |
        cd Source/PdfImageAddIn
        
        # Compile source files
        cl /c /EHsc /I../../include /I../Addin /DWIN32 /D_WINDOWS /D_USRDLL /D_WINDLL PdfImageAddIn.cpp MyClassFactory.cpp PdfDragDropWindow.cpp
        
        # Create DLL
        link /DLL /OUT:PdfImageAddIn.dll /DEF:PdfImageAddIn.def PdfImageAddIn.obj MyClassFactory.obj PdfDragDropWindow.obj ../../lib/addin.lib ../../lib/pdfium.lib ole32.lib oleaut32.lib uuid.lib
        
        # Check result
        if (Test-Path "PdfImageAddIn.dll") {
          Write-Host "PdfImageAddIn.dll created successfully"
          Get-Item "PdfImageAddIn.dll" | Select-Object Name, Length, LastWriteTime
        } else {
          Write-Host "Error creating PdfImageAddIn.dll"
          exit 1
        }
      shell: powershell
    
    - name: Build LogAddIn (additional)
      run: |
        cd Source/LogAddin
        
        # Compile LogAddIn
        cl /c /EHsc /I../Addin /DWIN32 /D_WINDOWS /D_USRDLL /D_WINDLL LogAddIn.cpp MyClassFactory.cpp
        
        # Create DLL
        link /DLL /OUT:LogAddIn.dll /DEF:ADDIN.DEF LogAddIn.obj MyClassFactory.obj ../../lib/addin.lib ole32.lib oleaut32.lib uuid.lib
        
        if (Test-Path "LogAddIn.dll") {
          Write-Host "LogAddIn.dll created successfully"
        }
      shell: powershell
    
    - name: Build ScanSymb (additional)
      run: |
        cd Source/ScanSymb
        
        # Compile ScanSymb
        cl /c /EHsc /I../Addin /DWIN32 /D_WINDOWS /D_USRDLL /D_WINDLL ScanAddIn.cpp MyClassFactory.cpp ScanWindow.cpp
        
        # Create DLL
        link /DLL /OUT:ScanSymb.dll /DEF:ScanSymb.DEF ScanAddIn.obj MyClassFactory.obj ScanWindow.obj ../../lib/addin.lib ole32.lib oleaut32.lib uuid.lib user32.lib
        
        if (Test-Path "ScanSymb.dll") {
          Write-Host "ScanSymb.dll created successfully"
        }
      shell: powershell
    
    - name: Copy artifacts
      run: |
        # Create artifacts folder
        New-Item -ItemType Directory -Path "artifacts" -Force
        
        # Copy built DLL files
        if (Test-Path "Source/PdfImageAddIn/PdfImageAddIn.dll") {
          Copy-Item -Path "Source/PdfImageAddIn/PdfImageAddIn.dll" -Destination "artifacts/"
        }
        if (Test-Path "Source/LogAddin/LogAddIn.dll") {
          Copy-Item -Path "Source/LogAddin/LogAddIn.dll" -Destination "artifacts/"
        }
        if (Test-Path "Source/ScanSymb/ScanSymb.dll") {
          Copy-Item -Path "Source/ScanSymb/ScanSymb.dll" -Destination "artifacts/"
        }
                  
          # Copy documentation
          Copy-Item -Path "*.htm" -Destination "artifacts/" -Force
        if (Test-Path "Source/PdfImageAddIn/README.md") {
          Copy-Item -Path "Source/PdfImageAddIn/README.md" -Destination "artifacts/" -Force
        }
        if (Test-Path "Source/PdfImageAddIn/PDFIUM_INSTALL.md") {
          Copy-Item -Path "Source/PdfImageAddIn/PDFIUM_INSTALL.md" -Destination "artifacts/" -Force
        }
        if (Test-Path "Source/PdfImageAddIn/PdfImageComp.htm") {
          Copy-Item -Path "Source/PdfImageAddIn/PdfImageComp.htm" -Destination "artifacts/" -Force
        }
                  
          # Show what we got
          Get-ChildItem -Path "artifacts" -Recurse
      shell: powershell
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: compiled-components
        path: artifacts/
        retention-days: 30
    
    - name: Test basic functionality
      run: |
        # Basic test - check if DLL can be loaded
        try {
          $dll = [System.Reflection.Assembly]::LoadFile("$PWD\artifacts\PdfImageAddIn.dll")
          Write-Host "PdfImageAddIn.dll loads correctly"
        } catch {
          Write-Host "Warning: Could not load DLL directly (dependencies may be required)"
        }
      shell: powershell
      continue-on-error: true 