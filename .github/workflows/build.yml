name: Build PdfImageAddIn

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1
    
    - name: Setup Visual Studio
      uses: microsoft/setup-msbuild@v1.1
      with:
        vs-version: '16.0'
    
    - name: Download PDFium
      run: |
        # –°–∫–∞—á–∏–≤–∞–µ–º –ø—Ä–µ–¥—Å–æ–±—Ä–∞–Ω–Ω—ã–µ PDFium –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å retry –ª–æ–≥–∏–∫–æ–π
        $url = "https://github.com/bblanchon/pdfium-binaries/releases/download/chromium%2F5790/pdfium-win-x86.tgz"
        $output = "pdfium-win-x86.tgz"
        $maxAttempts = 3
        $attempt = 1
        
        while ($attempt -le $maxAttempts) {
            try {
                Write-Host "–ü–æ–ø—ã—Ç–∫–∞ $attempt –∏–∑ $maxAttempts –∑–∞–≥—Ä—É–∑–∫–∏ PDFium..."
                
                # –ü—Ä–æ–±—É–µ–º curl (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤)
                if (Get-Command curl -ErrorAction SilentlyContinue) {
                    Write-Host "–ò—Å–ø–æ–ª—å–∑—É–µ–º curl –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏..."
                    & curl -L -o $output $url --retry 3 --retry-delay 5 --max-time 300
                    if ($LASTEXITCODE -eq 0) {
                        Write-Host "‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ curl —É—Å–ø–µ—à–Ω–∞"
                        break
                    }
                }
                
                # Fallback –Ω–∞ Invoke-WebRequest
                Write-Host "–ò—Å–ø–æ–ª—å–∑—É–µ–º Invoke-WebRequest..."
                $webClient = New-Object System.Net.WebClient
                $webClient.DownloadFile($url, $output)
                Write-Host "‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ WebClient —É—Å–ø–µ—à–Ω–∞"
                break
                
            } catch {
                Write-Host "‚ùå –ü–æ–ø—ã—Ç–∫–∞ $attempt –Ω–µ —É–¥–∞–ª–∞—Å—å: $($_.Exception.Message)"
                if ($attempt -eq $maxAttempts) {
                    Write-Host "üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫..."
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL —Å GitHub releases
                    $altUrl = "https://github.com/bblanchon/pdfium-binaries/releases/latest/download/pdfium-win-x86.tgz"
                    try {
                        & curl -L -o $output $altUrl --retry 3 --retry-delay 5 --max-time 300
                        if ($LASTEXITCODE -eq 0) {
                            Write-Host "‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–∞"
                            break
                        }
                    } catch {
                        Write-Host "‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å"
                        throw "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å PDFium –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"
                    }
                }
                $attempt++
                Start-Sleep -Seconds 10
            }
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω
        if (!(Test-Path $output)) {
            throw "–§–∞–π–ª PDFium –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω"
        }
        
        Write-Host "üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ PDFium..."
        tar -xzf $output
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫
        New-Item -ItemType Directory -Path "lib" -Force
        New-Item -ItemType Directory -Path "include" -Force
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        Write-Host "üìÇ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..."
        if (Test-Path "bin") {
            Copy-Item -Path "bin\*.dll" -Destination "lib\" -Force
        }
        if (Test-Path "lib") {
            Copy-Item -Path "lib\*.lib" -Destination "lib\" -Force
        }
        if (Test-Path "include") {
            Copy-Item -Path "include\*" -Destination "include\" -Recurse -Force
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        Write-Host "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PDFium:"
        Get-ChildItem -Path "lib" -Recurse
        Get-ChildItem -Path "include" -Recurse
      shell: powershell
    
    - name: Build AddIn Base Library
      run: |
        cd Source/Addin
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        cl /c /EHsc /I../../include *.cpp
        lib /OUT:../../lib/addin.lib *.obj
      shell: cmd
    
    - name: Build PdfImageAddIn
      run: |
        cd Source/PdfImageAddIn
        
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
        cl /c /EHsc /I../../include /I../Addin /DWIN32 /D_WINDOWS /D_USRDLL /D_WINDLL PdfImageAddIn.cpp MyClassFactory.cpp PdfDragDropWindow.cpp
        
        # –°–æ–∑–¥–∞–µ–º DLL
        link /DLL /OUT:PdfImageAddIn.dll /DEF:PdfImageAddIn.def PdfImageAddIn.obj MyClassFactory.obj PdfDragDropWindow.obj ../../lib/addin.lib ../../lib/pdfium.lib ole32.lib oleaut32.lib uuid.lib
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (Test-Path "PdfImageAddIn.dll") {
          Write-Host "‚úÖ PdfImageAddIn.dll —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
          Get-Item "PdfImageAddIn.dll" | Select-Object Name, Length, LastWriteTime
        } else {
          Write-Host "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PdfImageAddIn.dll"
          exit 1
        }
      shell: powershell
    
    - name: Build LogAddIn (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)
      run: |
        cd Source/LogAddin
        
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º LogAddIn
        cl /c /EHsc /I../Addin /DWIN32 /D_WINDOWS /D_USRDLL /D_WINDLL LogAddIn.cpp MyClassFactory.cpp
        
        # –°–æ–∑–¥–∞–µ–º DLL
        link /DLL /OUT:LogAddIn.dll /DEF:ADDIN.DEF LogAddIn.obj MyClassFactory.obj ../../lib/addin.lib ole32.lib oleaut32.lib uuid.lib
        
        if (Test-Path "LogAddIn.dll") {
          Write-Host "‚úÖ LogAddIn.dll —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
        }
      shell: powershell
    
    - name: Build ScanSymb (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)
      run: |
        cd Source/ScanSymb
        
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º ScanSymb
        cl /c /EHsc /I../Addin /DWIN32 /D_WINDOWS /D_USRDLL /D_WINDLL ScanAddIn.cpp MyClassFactory.cpp ScanWindow.cpp
        
        # –°–æ–∑–¥–∞–µ–º DLL
        link /DLL /OUT:ScanSymb.dll /DEF:ScanSymb.DEF ScanAddIn.obj MyClassFactory.obj ScanWindow.obj ../../lib/addin.lib ole32.lib oleaut32.lib uuid.lib user32.lib
        
        if (Test-Path "ScanSymb.dll") {
          Write-Host "‚úÖ ScanSymb.dll —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
        }
      shell: powershell
    
    - name: Copy artifacts
      run: |
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        New-Item -ItemType Directory -Path "artifacts" -Force
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ DLL
        if (Test-Path "Source/PdfImageAddIn/PdfImageAddIn.dll") {
          Copy-Item -Path "Source/PdfImageAddIn/PdfImageAddIn.dll" -Destination "artifacts/"
        }
        if (Test-Path "Source/LogAddin/LogAddIn.dll") {
          Copy-Item -Path "Source/LogAddin/LogAddIn.dll" -Destination "artifacts/"
        }
        if (Test-Path "Source/ScanSymb/ScanSymb.dll") {
          Copy-Item -Path "Source/ScanSymb/ScanSymb.dll" -Destination "artifacts/"
        }
        
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        Copy-Item -Path "*.htm" -Destination "artifacts/" -Force
        Copy-Item -Path "Source/PdfImageAddIn/README.md" -Destination "artifacts/" -Force
        Copy-Item -Path "Source/PdfImageAddIn/PDFIUM_INSTALL.md" -Destination "artifacts/" -Force
        Copy-Item -Path "Source/PdfImageAddIn/PdfImageComp.htm" -Destination "artifacts/" -Force
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å
        Get-ChildItem -Path "artifacts" -Recurse
      shell: powershell
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: compiled-components
        path: artifacts/
        retention-days: 30
    
    - name: Test basic functionality
      run: |
        # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ç–µ—Å—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ DLL –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å
        try {
          $dll = [System.Reflection.Assembly]::LoadFile("$PWD\artifacts\PdfImageAddIn.dll")
          Write-Host "‚úÖ PdfImageAddIn.dll –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        } catch {
          Write-Host "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å DLL –Ω–∞–ø—Ä—è–º—É—é (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É—é—Ç—Å—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)"
        }
      shell: powershell
      continue-on-error: true 