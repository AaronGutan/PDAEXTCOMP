name: Build PdfImageAddIn Component

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1
    
    - name: Setup Visual Studio
      uses: microsoft/setup-msbuild@v1.1
      with:
        vs-version: '16.0'
    
    - name: Download PDFium
      run: |
        # Download prebuilt PDFium libraries with retry logic
        $url = "https://github.com/bblanchon/pdfium-binaries/releases/download/chromium%2F7295/pdfium-win-x86.tgz"
        $output = "pdfium-win-x86.tgz"
        $maxAttempts = 3
        $attempt = 1
        
        while ($attempt -le $maxAttempts) {
            try {
                Write-Host "Attempt $attempt of $maxAttempts to download PDFium..."
                
                # Try curl (more reliable for large files)
                if (Get-Command curl -ErrorAction SilentlyContinue) {
                    Write-Host "Using curl for download..."
                    & curl.exe --location --output $output $url --retry 3 --retry-delay 5 --max-time 300
                    if ($LASTEXITCODE -eq 0) {
                        Write-Host "Curl download successful"
                        break
                    }
                }
                
                # Fallback to Invoke-WebRequest
                Write-Host "Using Invoke-WebRequest..."
                $webClient = New-Object System.Net.WebClient
                $webClient.DownloadFile($url, $output)
                Write-Host "WebClient download successful"
                break
                
            } catch {
                Write-Host "Attempt $attempt failed: $($_.Exception.Message)"
                if ($attempt -eq $maxAttempts) {
                    Write-Host "Trying alternative source..."
                    # Use alternative URL from GitHub releases
                    $altUrl = "https://github.com/bblanchon/pdfium-binaries/releases/latest/download/pdfium-win-x86.tgz"
                    try {
                        & curl.exe --location --output $output $altUrl --retry 3 --retry-delay 5 --max-time 300
                        if ($LASTEXITCODE -eq 0) {
                            Write-Host "Alternative source download successful"
                            break
                        }
                    } catch {
                        Write-Host "All download attempts failed"
                        throw "Failed to download PDFium libraries"
                    }
                }
                $attempt++
                Start-Sleep -Seconds 10
            }
        }
        
        # Check that file was downloaded and is not empty
        if (!(Test-Path $output)) {
            throw "PDFium file was not downloaded"
        }
        
        $fileSize = (Get-Item $output).Length
        if ($fileSize -lt 1000000) {  # Less than 1MB probably means error page
            Write-Host "Downloaded file size: $fileSize bytes"
            throw "PDFium file is too small - probably an error page"
        }
        
        Write-Host "PDFium file downloaded successfully, size: $fileSize bytes"
        
        Write-Host "Extracting PDFium..."
        tar -xzf $output
        
        # Create directories for libraries
        New-Item -ItemType Directory -Path "lib" -Force
        New-Item -ItemType Directory -Path "include" -Force
        
        # Copy files
        Write-Host "Copying files..."
        
        # Check actual structure first
        Write-Host "Checking extracted structure:"
        Get-ChildItem -Path "." -Recurse | Where-Object { $_.Name -match "\.(dll|lib|h)$" } | ForEach-Object { Write-Host "  $($_.FullName)" }
        
        # Copy DLL files if they exist
        if (Test-Path "bin") {
            Write-Host "Copying DLL files from bin..."
            Copy-Item -Path "bin\*.dll" -Destination "lib\" -Force -ErrorAction SilentlyContinue
        }
        
        # Copy LIB files - avoid self-copy
        $libFiles = Get-ChildItem -Path "." -Recurse -Filter "*.lib" | Where-Object { $_.DirectoryName -ne (Resolve-Path "lib").Path }
        if ($libFiles) {
            Write-Host "Copying LIB files..."
            foreach ($file in $libFiles) {
                Copy-Item -Path $file.FullName -Destination "lib\" -Force
                Write-Host "  Copied: $($file.Name)"
            }
        }
        
        # Copy header files - avoid self-copy
        $headerDirs = Get-ChildItem -Path "." -Directory -Recurse | Where-Object { $_.Name -eq "include" -and $_.FullName -ne (Resolve-Path "include").Path }
        if ($headerDirs) {
            Write-Host "Copying header files..."
            foreach ($dir in $headerDirs) {
                Copy-Item -Path "$($dir.FullName)\*" -Destination "include\" -Recurse -Force
                Write-Host "  Copied headers from: $($dir.FullName)"
            }
        }
        
        # Show structure
        Write-Host "PDFium installation result:"
        if (Test-Path "lib") { Get-ChildItem -Path "lib" -Recurse }
        if (Test-Path "include") { Get-ChildItem -Path "include" -Recurse }
      shell: powershell
    
    - name: Build AddIn Base Library
      run: |
        # Initialize Visual Studio environment
        $vsPaths = @(
            "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat",
            "${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars32.bat",
            "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Professional\VC\Auxiliary\Build\vcvars32.bat",
            "${env:ProgramFiles}\Microsoft Visual Studio\2022\Professional\VC\Auxiliary\Build\vcvars32.bat",
            "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars32.bat",
            "${env:ProgramFiles}\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars32.bat",
            "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvars32.bat",
            "${env:ProgramFiles}\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars32.bat"
        )
        
        $vsPath = $null
        foreach ($path in $vsPaths) {
            if (Test-Path $path) {
                $vsPath = $path
                Write-Host "Found Visual Studio at: $vsPath"
                break
            }
        }
        
        if (-not $vsPath) {
            throw "Visual Studio not found!"
        }
        
        # Build base library
        cmd /c "`"$vsPath`" && cd Source\Addin && cl /c /EHsc /I. /I../../include *.cpp && lib /OUT:../../lib/addin.lib *.obj"
      shell: powershell
    
    - name: Build PdfImageAddIn
      run: |
        # Initialize Visual Studio environment
        $vsPaths = @(
            "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat",
            "${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars32.bat",
            "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Professional\VC\Auxiliary\Build\vcvars32.bat",
            "${env:ProgramFiles}\Microsoft Visual Studio\2022\Professional\VC\Auxiliary\Build\vcvars32.bat",
            "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars32.bat",
            "${env:ProgramFiles}\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars32.bat",
            "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvars32.bat",
            "${env:ProgramFiles}\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars32.bat"
        )
        
        $vsPath = $null
        foreach ($path in $vsPaths) {
            if (Test-Path $path) {
                $vsPath = $path
                Write-Host "Found Visual Studio at: $vsPath"
                break
            }
        }
        
        if (-not $vsPath) {
            throw "Visual Studio not found!"
        }
        
        # Build PdfImageAddIn
        $buildCmd = "`"$vsPath`" && cd Source\PdfImageAddIn && " +
                   "cl /c /EHsc /I. /I../../include /I../Addin /DWIN32 /D_WINDOWS /D_USRDLL /D_WINDLL PdfImageAddIn.cpp MyClassFactory.cpp PdfDragDropWindow.cpp && " +
                   "link /DLL /OUT:PdfImageAddIn.dll /DEF:PdfImageAddIn.def PdfImageAddIn.obj MyClassFactory.obj PdfDragDropWindow.obj ../../lib/addin.lib ../../lib/pdfium.lib ole32.lib oleaut32.lib uuid.lib user32.lib gdi32.lib"
        
        cmd /c $buildCmd
        
        # Check result
        if (Test-Path "Source/PdfImageAddIn/PdfImageAddIn.dll") {
          Write-Host "PdfImageAddIn.dll created successfully"
          Get-Item "Source/PdfImageAddIn/PdfImageAddIn.dll" | Select-Object Name, Length, LastWriteTime
        } else {
          Write-Host "Error creating PdfImageAddIn.dll"
          exit 1
        }
      shell: powershell
    

    
    - name: Copy artifacts
      run: |
        # Create artifacts folder
        New-Item -ItemType Directory -Path "artifacts" -Force
        
        # Copy built DLL files
        if (Test-Path "Source/PdfImageAddIn/PdfImageAddIn.dll") {
          Copy-Item -Path "Source/PdfImageAddIn/PdfImageAddIn.dll" -Destination "artifacts/"
          Write-Host "PdfImageAddIn.dll copied to artifacts"
        } else {
          Write-Host "Error: PdfImageAddIn.dll not found!"
          exit 1
        }
        
        # Copy PDFium DLL
        if (Test-Path "bin/pdfium.dll") {
          Copy-Item -Path "bin/pdfium.dll" -Destination "artifacts/"
          Write-Host "pdfium.dll copied to artifacts"
        } else {
          Write-Host "Error: pdfium.dll not found!"
          exit 1
        }
                  
          # Copy documentation
          Copy-Item -Path "*.htm" -Destination "artifacts/" -Force
        if (Test-Path "Source/PdfImageAddIn/README.md") {
          Copy-Item -Path "Source/PdfImageAddIn/README.md" -Destination "artifacts/" -Force
        }
        if (Test-Path "Source/PdfImageAddIn/PDFIUM_INSTALL.md") {
          Copy-Item -Path "Source/PdfImageAddIn/PDFIUM_INSTALL.md" -Destination "artifacts/" -Force
        }
        if (Test-Path "Source/PdfImageAddIn/PdfImageComp.htm") {
          Copy-Item -Path "Source/PdfImageAddIn/PdfImageComp.htm" -Destination "artifacts/" -Force
        }
                  
          # Show what we got
          Get-ChildItem -Path "artifacts" -Recurse
      shell: powershell
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: compiled-components
        path: artifacts/
        retention-days: 30
    
    - name: Test basic functionality
      run: |
        # Basic test - check if DLL can be loaded
        try {
          $dll = [System.Reflection.Assembly]::LoadFile("$PWD\artifacts\PdfImageAddIn.dll")
          Write-Host "PdfImageAddIn.dll loads correctly"
        } catch {
          Write-Host "Warning: Could not load DLL directly (dependencies may be required)"
        }
      shell: powershell
      continue-on-error: true 